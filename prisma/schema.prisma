// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String        @id @default(uuid())
  name        String
  userId      String
  billboards  Billboard[]   @relation("StoreToBillboard")
  categories  Category[]    @relation("StoreToCategory")
  designers   Designer[]    @relation("StoreToDesigner")
  products    Product[]     @relation("StoreToProduct")
  sellers     Seller[]      @relation("StoreToSeller")
  sizes       Size[]        @relation("StoreToSize")
  colors      Color[]       @relation("StoreToColor")
  condition   Condition[]   @relation("StoreToCondition")
  material    Material[]    @relation("StoreToMaterial")
  gender       Gender[]       @relation("StoreToStyle")
  subcategory Subcategory[] @relation("StoreToSubcategory")
  orders      Order[]       @relation("StoreToOrder")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String   @unique
  createdAt   DateTime @default(now())
  geoLocation String?
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  designers  Designer[]
  sellers    Seller[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Seller {
  id              String   @id @default(uuid())
  instagramHandle String   @unique
  name            String   @unique
  createdAt       DateTime @default(now())
  storeId         String
  store           Store    @relation("StoreToSeller", fields: [storeId], references: [id])

  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  // Sold by the seller
  products   Product[]  @relation("SellerToProduct")
  // Designers seller stocks
  designers  Designer[] @relation("SellerToDesigner")
  //Cateories sellers clothes are in
  categories Category[] @relation("SellerToCategory")

  @@index([billboardId])
  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  name     String
  clicks   Int?      @default(0)
  products Product[] @relation("CategoryToProduct")
  sellers  Seller[]  @relation("SellerToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Designer {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToDesigner", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])

  name      String
  products  Product[] @relation("DesignerToProduct")
  seller    Seller[]  @relation("SellerToDesigner")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String
  retailPrice   Decimal
  ourPrice      Decimal
  measurements  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  likes         Int?        @default(0)
  clicks        Int?        @default(0)
  isOnSale      Boolean     @default(false)
  isFeatured    Boolean     @default(false)
  isArchived    Boolean     @default(false)
  isCharity     Boolean     @default(false)
  isHidden      Boolean     @default(false)
  images        Image[] // Relation to Image model
  orderItems    OrderItem[] // Relation to Order model
  storeId       String // Foreign Key to Store
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String // Foreign Key to Category
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  designerId    String // Foreign Key to Designer
  designer      Designer    @relation("DesignerToProduct", fields: [designerId], references: [id])
  sellerId      String // Foreign Key to Seller
  seller        Seller      @relation("SellerToProduct", fields: [sellerId], references: [id])
  sizeId        String // Foreign Key to Size
  size          Size        @relation(fields: [sizeId], references: [id])
  colorId       String // Foreign Key to Color
  color         Color       @relation(fields: [colorId], references: [id])
  conditionId   String // Foreign Key to Color
  condition     Condition   @relation(fields: [conditionId], references: [id])
  materialId    String // Foreign Key to Color
  material      Material    @relation(fields: [materialId], references: [id])
  genderId       String // Foreign Key to Color
  gender         Gender       @relation(fields: [genderId], references: [id])
  subcategoryId String // Foreign Key to Color
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])

  @@index([storeId])
  @@index([sellerId])
  @@index([designerId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([conditionId])
  @@index([materialId])
  @@index([genderId])
  @@index([subcategoryId])
}

model Order {
  id                String      @id @default(uuid())
  storeId           String // Foreign Key to Store
  store             Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems        OrderItem[] // Relation to OrderItem model
  isPaid            Boolean     @default(false)
  hasBeenDispatched Boolean     @default(false)

  phone     String   @default("")
  address   String   @default("")
  email     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // userId String? // Foreign Key to User
  // user   User?   @relation("OrderToUser", fields: [userId], references: [id])
  // @@index([userId])

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Gender {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToStyle", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Subcategory {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSubcategory", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// model CountryOfOrigin {
//   id        String    @id @default(uuid())
//   storeId   String    // Foreign Key to Store
//   store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
//   name      String
//   value     String
//   products  Product[] // Relation to Product model
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   @@index([storeId])
// }

model Material {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToMaterial", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Condition {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToCondition", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

// model User {
//   id        String   @id @default(uuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   email     String   @unique

//   likeList  // array of product ids
//   clickList // array of product ids
//   orderHistory // array of order ids
//   purchaseHistory // array of product ids

//  followingSeller // array of seller ids
// }
