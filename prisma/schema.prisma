// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Company {
  id         String @id @default(uuid())
  name       String
  adminEmail String 
  userId     String // Clerk js user id. This allows only the signed in user to see the company.

  stores Store[] @relation("CompanyToStore")
}

model Store {
  id     String @id @default(uuid())
  name   String
  userId String // Clerk js user id. This allows only the signed in user to see the companies stores.

  consignmentRate Int    @default(50)
  currency        String @default("GBP")
  countryCode     String @default("GB")
  taxRate         Int    @default(20)
  // TODO: Mark the stores as wholesale or retail default is retail. A company can have a store of each type

  our_platform_fee Int     @default(1) // just incase we wanna offer the service at a discount rate
  email            String?

  address   StoreAddress? @relation(fields: [addressId], references: [id])
  addressId String?

  billboards  Billboard[]   @relation("StoreToBillboard")
  categories  Category[]    @relation("StoreToCategory")
  designers   Designer[]    @relation("StoreToDesigner")
  products    Product[]     @relation("StoreToProduct")
  sellers     Seller[]      @relation("StoreToSeller")
  sizes       Size[]        @relation("StoreToSize")
  colors      Color[]       @relation("StoreToColor")
  condition   Condition[]   @relation("StoreToCondition")
  material    Material[]    @relation("StoreToMaterial")
  gender      Gender[]      @relation("StoreToStyle")
  subcategory Subcategory[] @relation("StoreToSubcategory")
  orders      Order[]       @relation("StoreToOrder")
  orderitem   OrderItem[]   @relation("StoreToOrderItem")
  payouts     Payout[]      @relation("StoreToPayout")
  users       User[]        @relation("StoreToUser")
  staff       Staff[]       @relation("StoreToStaff")

  stripe_connect_unique_id String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String // Foreign Key to Company
  company   Company @relation("CompanyToStore", fields: [companyId], references: [id])

  @@index([addressId])
  @@index([companyId])
}

model StoreAddress {
  id         String  @id @default(uuid())
  city       String?
  country    String?
  line1      String?
  line2      String?
  postalCode String?
  state      String?

  Store Store[]
}

model Seller {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  storeId    String
  store      Store    @relation("StoreToSeller", fields: [storeId], references: [id])
  sellerType String?  @default("re-seller")

  instagramHandle String     @default("")
  firstName       String?    @default("")
  lastName        String?    @default("")
  email           String?    @default("")
  phoneNumber     String?    @default("")
  shippingAddress String?    @default("")
  country         String?    @default("")
  soldCount       Int?       @default(0)
  billboardId     String? // Foreign Key to Billboard
  billboard       Billboard? @relation(fields: [billboardId], references: [id])
  isArchived      Boolean    @default(false)

  stripe_connect_unique_id String?  @default("")
  payouts                  Payout[]
  consignmentRate          Int?

  charityName String? @default("")
  charityUrl  String? @default("")

  // Influencer specific fields
  shoeSizeEU String? @default("")
  topSize    String? @default("")
  bottomSize String? @default("")

  // Re-seller specific fields
  storeName   String? @default("")
  description String? @default("")

  // Items listed by the seller
  products     Product[]   @relation("SellerToProduct")
  // Designers seller stocks
  designers    Designer[]  @relation("SellerToDesigner")
  //Cateories sellers clothes are in
  categories   Category[]  @relation("SellerToCategory")
  // Items sold by the seller
  orderedItems OrderItem[]

  followingUsers User[] @relation("FollowingSeller")
  // Product        Product[] @relation("StaffToProduct")
  // Product        Product[] @relation("UserToProduct")

  @@index([billboardId])
  @@index([storeId])
}

model Order {
  id                String      @id @default(uuid())
  storeId           String // Foreign Key to Store
  store             Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems        OrderItem[] // Relation to OrderItem model
  isPaid            Boolean     @default(false)
  hasBeenDispatched Boolean     @default(false)
  inStoreSale       Boolean     @default(true)
  totalAmount       Decimal

  soldByStaffId String? // Foreign Key to Staff
  soldByStaff   Staff?  @relation("StaffToOrder", fields: [soldByStaffId], references: [id])

  phone     String   @default("")
  address   String   @default("")
  email     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Payout Payout[]

  userId            String? // Foreign Key to User
  orderHistoryUsers User[]  @relation("OrderHistory")

  @@index([userId])
  @@index([storeId])
  @@index([soldByStaffId])
}

model OrderItem {
  id        String  @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store   @relation("StoreToOrderItem", fields: [storeId], references: [id])
  orderId   String? // Foreign Key to Order
  order     Order?  @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  sellerId  String  @default("") // Foreign Key to Seller
  seller    Seller  @relation(fields: [sellerId], references: [id])

  soldByStaffId String? // Foreign Key to Staff
  soldByStaff   Staff?  @relation("StaffToOrderItem", fields: [soldByStaffId], references: [id])

  productAmount            Decimal?  @default(0.0)
  stripe_connect_unique_id String?   @default("")
  Payout                   Payout[]
  createdAt                DateTime? @default(now())
  updatedAt                DateTime? @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([sellerId])
  @@index([storeId])
  @@index([soldByStaffId])
}

model Payout {
  id          String     @id @default(uuid())
  storeId     String? // Foreign Key to store
  store       Store?     @relation("StoreToPayout", fields: [storeId], references: [id])
  sellerId    String? // Foreign Key to Seller
  seller      Seller?    @relation(fields: [sellerId], references: [id])
  orderItemId String? // Foreign Key to OrderItem
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
  orderId     String? // Foreign Key to Order
  order       Order?     @relation(fields: [orderId], references: [id])

  amount           Decimal? @default(0.0)
  transferGroupId  String?  @default("")
  stripeTransferId String?  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sellerId])
  @@index([storeId])
  @@index([orderItemId])
  @@index([orderId])
}

model Product {
  id            String      @id @default(uuid())
  name          String
  ourPrice      Decimal     @default(0.0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  images        Image[] // Relation to Image model
  orderItems    OrderItem[] // Relation to Order model
  storeId       String // Foreign Key to Store
  store         Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId    String // Foreign Key to Category
  category      Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  designerId    String // Foreign Key to Designer
  designer      Designer    @relation("DesignerToProduct", fields: [designerId], references: [id])
  sellerId      String // Foreign Key to Seller
  seller        Seller      @relation("SellerToProduct", fields: [sellerId], references: [id])
  staffId       String? // Foreign Key to staff
  staff         Staff?      @relation("StaffToProduct", fields: [staffId], references: [id])
  userId        String? // Foreign Key to User
  user          User?       @relation("UserToProduct", fields: [userId], references: [id])

  sizeId        String // Foreign Key to Size
  size          Size        @relation(fields: [sizeId], references: [id])
  subcategoryId String// Foreign Key to Color
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
  colorId         String? // Foreign Key to Color
  color           Color?     @relation(fields: [colorId], references: [id])
  conditionId     String? // Foreign Key to Color
  condition       Condition? @relation(fields: [conditionId], references: [id])
  materialId      String? // Foreign Key to Color
  material        Material?  @relation(fields: [materialId], references: [id])
  genderId        String? // Foreign Key to Color
  gender          Gender?    @relation(fields: [genderId], references: [id])

  isOnSale        Boolean    @default(false)
  isFeatured      Boolean    @default(false)
  isArchived      Boolean    @default(false)
  isCharity       Boolean    @default(false)
  isHidden        Boolean    @default(false)
  isOnline        Boolean    @default(false)
  retailPrice     Decimal?   @default(0.0)
  originalPrice   Decimal?   @default(0.0)
  timesDiscounted Int?       @default(0)
  likes           Int?       @default(0)
  clicks          Int?       @default(0)
  description     String?
  measurements    String?

  userClicks User[] @relation("ProductToUserClicks")
  userLikes  User[] @relation("ProductToUserLikes")

  purchaseHistoryUsers User[] @relation("PurchaseHistory")

  @@index([storeId])
  @@index([sellerId])
  @@index([designerId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
  @@index([conditionId])
  @@index([materialId])
  @@index([genderId])
  @@index([subcategoryId])
  @@index([staffId])
  @@index([userId])
}

model Category {
  id          String     @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store      @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String? // Foreign Key to Billboard
  billboard   Billboard? @relation(fields: [billboardId], references: [id])

  name     String
  clicks   Int?      @default(0)
  products Product[] @relation("CategoryToProduct")
  sellers  Seller[]  @relation("SellerToCategory")

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  @@index([storeId])
  @@index([billboardId])
}

model Designer {
  id          String     @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store      @relation("StoreToDesigner", fields: [storeId], references: [id])
  billboardId String? // Foreign Key to Billboard
  billboard   Billboard? @relation(fields: [billboardId], references: [id])

  name     String
  products Product[] @relation("DesignerToProduct")
  seller   Seller[]  @relation("SellerToDesigner")

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id         String    @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name       String
  value      String?
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)

  @@index([storeId])
}

model Color {
  id         String    @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name       String
  value      String?
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)

  @@index([storeId])
}

model Gender {
  id         String    @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToStyle", fields: [storeId], references: [id])
  name       String
  value      String?
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)

  @@index([storeId])
}

model Subcategory {
  id         String    @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToSubcategory", fields: [storeId], references: [id])
  name       String
  value      String?
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)

  @@index([storeId])
}

model Material {
  id         String    @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToMaterial", fields: [storeId], references: [id])
  name       String
  value      String?
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)

  @@index([storeId])
}

model Condition {
  id         String    @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store     @relation("StoreToCondition", fields: [storeId], references: [id])
  name       String
  value      String?
  products   Product[] // Relation to Product model
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isArchived Boolean   @default(false)

  @@index([storeId])
}

model Image {
  id         String   @id @default(uuid())
  productId  String // Foreign Key to Product
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url        String // URL of the image
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)

  @@index([productId])
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  designers  Designer[]
  sellers    Seller[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String? @unique // Foreign Key to User
  type              String
  provider          String  @unique
  providerAccountId String  @unique
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User? @relation("AccountToUser", fields: [userId], references: [id], onDelete: Cascade)

  //   likeList  // array of product ids
  //   clickList // array of product ids
  //   orderHistory // array of order ids
  //   purchaseHistory // array of product ids
  //  followingSeller // array of seller ids

  @@index([userId])
}

// AKA customers
model User {
  id          String  @id @default(uuid())
  storeId     String?
  store       Store?  @relation("StoreToUser", fields: [storeId], references: [id])
  email       String  @unique
  postalCode  String?
  phoneNumber String?

  name           String?  @default("")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  hashedPassword String

  account Account? @relation("AccountToUser")

  interactingStaff Staff[] @relation("UserToStaff")

  // Interaction Metrics
  likeList  Product[] @relation("ProductToUserLikes")
  clickList Product[] @relation("ProductToUserClicks")
  Product   Product[] @relation("UserToProduct")

  orderHistory    Order[]   @relation("OrderHistory")
  purchaseHistory Product[] @relation("PurchaseHistory")
  followingSeller Seller[]  @relation("FollowingSeller")

  totalPurchases        Int? @default(0)
  totalItemsPurchased   Int? @default(0)
  totalTransactionCount Int? @default(0)

  isArchived Boolean @default(false)

  @@index([storeId])
}

model Staff {
  id      String  @id @default(uuid())
  storeId String?
  store   Store?  @relation("StoreToStaff", fields: [storeId], references: [id])

  email     String? @unique
  name      String?
  staffType String? @default("Client Advisor")

  orders     Order[]     @relation("StaffToOrder")
  orderItems OrderItem[] @relation("StaffToOrderItem")
  customers  User[]      @relation("UserToStaff")

  totalSales       Int? @default(0)
  targetTotalSales Int? @default(0)

  totalTransactionCount       Int? @default(0)
  targetTotalTransactionCount Int? @default(0)

  totalItemsSold       Int? @default(0)
  targetTotalItemsSold Int? @default(0)

  returningCustomers       Int? @default(0)
  targetReturningCustomers Int? @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isArchived Boolean   @default(false)
  Product    Product[] @relation("StaffToProduct")

  @@index([storeId])
}
